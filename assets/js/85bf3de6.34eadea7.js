"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[921],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||i;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6633:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:3},c={unversionedId:"concepts/view-auth",id:"concepts/view-auth",isDocsHomePage:!1,title:"View authorization",description:"The application (the one with the shell) contains Security.Authentication and Security.Authorization namespaces that introduce the role-based authorization into Prism's region mechanism. If the user does not have a required role to see a view, the ReloadRegionViewsRegionBehavior class, that has dependency to Security.Authorization, removes the view. When a user is switched and the new one meets role requirements, the view is added back to the region. Although, authorized views are not visible immediately after the application startup (because User.Anonymous does not have any roles), they all are loaded into the application memory along with their modules as early as when the application starts.",source:"@site/docs/concepts/view-auth.md",sourceDirName:"concepts",slug:"/concepts/view-auth",permalink:"/project-weekend-puzzles/docs/concepts/view-auth",editUrl:"https://github.com/NikodemMazur/project-weekend-puzzles/edit/master/website/docs/concepts/view-auth.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Tech independence",permalink:"/project-weekend-puzzles/docs/concepts/tech-independence"},next:{title:"Consistent look",permalink:"/project-weekend-puzzles/docs/concepts/consistent-look"}},l=[],u={toc:l};function p(e){var t=e.components,s=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The application (the one with the shell) contains ",(0,i.kt)("inlineCode",{parentName:"p"},"Security.Authentication")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Security.Authorization")," namespaces that introduce the role-based authorization into ",(0,i.kt)("inlineCode",{parentName:"p"},"Prism"),"'s region mechanism. If the user does not have a required role to see a view, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ReloadRegionViewsRegionBehavior")," class, that has dependency to ",(0,i.kt)("inlineCode",{parentName:"p"},"Security.Authorization"),", removes the view. When a user is switched and the new one meets role requirements, the view is added back to the region. Although, authorized views are not visible immediately after the application startup (because ",(0,i.kt)("inlineCode",{parentName:"p"},"User.Anonymous")," does not have any roles), they all are loaded into the application memory along with their modules as early as when the application starts."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Authorization",src:n(7455).Z})),(0,i.kt)("p",null,"All the user needs to do when restricting the access to a view is to annotate the view class with the convenient ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthorizeRoleAttribute")," attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'{7} title="\\src\\modules\\module-info\\ProjectWeekendPuzzles.ModuleInfo\\Views\\ModuleInfoView.xaml.cs"',"{7}":!0,title:'"\\src\\modules\\module-info\\ProjectWeekendPuzzles.ModuleInfo\\Views\\ModuleInfoView.xaml.cs"'},'// ...\nnamespace ProjectWeekendPuzzles.ModuleInfo.Views\n{\n    /// <summary>\n    /// Interaction logic for ModuleInfoView.xaml\n    /// </summary>\n    [AuthorizeRole("developer")]\n    public partial class ModuleInfoView : UserControl, IHeadered\n    {\n        private readonly PackIcon _navigationIcon;\n\n        public ModuleInfoView()\n        {\n            InitializeComponent();\n// ...\n')))}p.isMDXComponent=!0},7455:function(e,t,n){t.Z=n.p+"assets/images/authentication-f7bb4a851c3bc5f2e9471f9db27006be.gif"}}]);