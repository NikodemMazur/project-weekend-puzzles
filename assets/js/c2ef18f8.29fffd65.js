"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[458],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4733:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:1},l={unversionedId:"concepts/modularity",id:"concepts/modularity",isDocsHomePage:!1,title:"Modularity",description:"Modularity has been achieved with Prism Library. The library, which actually is an open-source framework, is used explicitly and is not hidden behind any interfaces nor abstracted in any other way. PWP allows a developer to extend its content through creating loosely coupled plugins (aka Prism's modules) that meet a contract defined and contained in the PWP's core dll. This way, the second SOLID principle is strongly enforced. In addition to modules, PWP also utilizes other Prism features such as MVVM helpers, Navigation and Dependency Injection. Prism is an extensible framework whose user can easily inject a custom implementation into it; for instance, to have child tabs inside parent tabs, a developer needs to overwrite (through DI registering) the ScopedRegionNavigationContentLoader class. Prism can be called the \"first-framework citizen\" as most of the components of PWP are built on the top of it. Therefore it is critical to PWP's developers and users to know each of Prism's mechanisms in detail to be able to freely tailor them to the application needs.",source:"@site/docs/concepts/modularity.md",sourceDirName:"concepts",slug:"/concepts/modularity",permalink:"/project-weekend-puzzles/docs/concepts/modularity",editUrl:"https://github.com/NikodemMazur/project-weekend-puzzles/edit/master/website/docs/concepts/modularity.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tech stack",permalink:"/project-weekend-puzzles/docs/tech-stack"},next:{title:"Tech independence",permalink:"/project-weekend-puzzles/docs/concepts/tech-independence"}},c=[],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Modularity has been achieved with ",(0,a.kt)("em",{parentName:"p"},"Prism Library"),". The library, which actually is an open-source framework, is used explicitly and is not hidden behind any interfaces nor abstracted in any other way. PWP allows a developer to extend its content through creating loosely coupled plugins (aka ",(0,a.kt)("em",{parentName:"p"},"Prism's")," modules) that meet a contract defined and contained in the PWP's core dll. This way, the second ",(0,a.kt)("em",{parentName:"p"},"SOLID")," principle is strongly enforced. In addition to modules, PWP also utilizes other ",(0,a.kt)("em",{parentName:"p"},"Prism")," features such as MVVM helpers, Navigation and Dependency Injection. ",(0,a.kt)("em",{parentName:"p"},"Prism")," is an extensible framework whose user can easily inject a custom implementation into it; for instance, to have child tabs inside parent tabs, a developer needs to overwrite (through DI registering) the ",(0,a.kt)("inlineCode",{parentName:"p"},"ScopedRegionNavigationContentLoader")," class. ",(0,a.kt)("em",{parentName:"p"},"Prism"),' can be called the "first-framework citizen" as most of the components of PWP are built on the top of it. Therefore it is critical to PWP\'s developers and users to know each of ',(0,a.kt)("em",{parentName:"p"},"Prism's")," mechanisms in detail to be able to freely tailor them to the application needs."),(0,a.kt)("p",null,"Project structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-none"},"PROJECT-WEEKEND-PUZZLES\\SRC\n\u251c\u2500\u2500\u2500app\n\u2502   \u251c\u2500\u2500\u2500ProjectWeekendPuzzles\n\u2502   \u2502   \u251c\u2500\u2500\u2500ApiServer\n\u2502   \u2502   \u251c\u2500\u2500\u2500ViewModels\n\u2502   \u2502   \u2514\u2500\u2500\u2500Views\n\u2502   \u2514\u2500\u2500\u2500ProjectWeekendPuzzles.Core\n\u2502       \u251c\u2500\u2500\u2500ApiServer\n\u2502       \u251c\u2500\u2500\u2500MvvmHelpers\n\u2502       \u251c\u2500\u2500\u2500ResourceDictionaries\n\u2502       \u2514\u2500\u2500\u2500ViewContract\n\u2514\u2500\u2500\u2500modules\n    \u251c\u2500\u2500\u2500dashboard\n    \u2502   \u251c\u2500\u2500\u2500ProjectWeekendPuzzles.Dashboard\n    \u2502   \u2502   \u251c\u2500\u2500\u2500ViewModels\n    \u2502   \u2502   \u2514\u2500\u2500\u2500Views\n    \u2502   \u251c\u2500\u2500\u2500ProjectWeekendPuzzles.Dashboard.Api\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Protos\n    \u2502   \u2502   \u2514\u2500\u2500\u2500Services\n    \u2502   \u251c\u2500\u2500\u2500ProjectWeekendPuzzles.Dashboard.Client\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Properties\n    \u2502   \u2502   \u2514\u2500\u2500\u2500Protos\n    \u2502   \u2514\u2500\u2500\u2500ProjectWeekendPuzzles.Dashboard.Model\n    \u2514\u2500\u2500\u2500module-info\n        \u2514\u2500\u2500\u2500ProjectWeekendPuzzles.ModuleInfo\n            \u251c\u2500\u2500\u2500Model\n            \u251c\u2500\u2500\u2500ViewModels\n            \u2514\u2500\u2500\u2500Views\n")),(0,a.kt)("p",null,"Registration of modules in the app (App.config):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<configuration>\n  <configSections>\n    <section name="modules" type="Prism.Modularity.ModulesConfigurationSection, Prism.Wpf" />\n  </configSections>\n  \n  <appSettings>\n    <add key="port" value="55331" />\n  </appSettings>\n\n  <modules>\n    <module assemblyFile="ProjectWeekendPuzzles.ModuleInfo.dll" moduleType="ProjectWeekendPuzzles.ModuleInfo.ModuleInfoModule, ProjectWeekendPuzzles.ModuleInfo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"\n            moduleName="ModuleInfoModule" startupLoaded="True" />\n    <module assemblyFile="ProjectWeekendPuzzles.Dashboard.dll" moduleType="ProjectWeekendPuzzles.Dashboard.DashboardModule, ProjectWeekendPuzzles.Dashboard, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"\n            moduleName="DashboardModule" startupLoaded="True" />\n  </modules>\n  \n</configuration>\n')))}u.isMDXComponent=!0}}]);