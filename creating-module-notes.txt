Steps:

1. Create new WPF User Control Library (.NET Core)
	- Name it following the convetion ProjectWeekendPuzzles.<YourModule>
	- Set the project location to: <your-repo-folder>\project-weekend-puzzles\src\modules\<your-module>. Follow the kebab-case for the name of folders that are not used by .NET solution/project
	- Choose .NET 5.0
2. Remove auto-generated UserControl1.xaml
3. Create Views and ViewModels folders in the project
4. In Views folder add User Control (WPF)
	- Name it <YourModule>View
5. Add 'Hello from my module!"
	- Add following resource dictionaries for the consisntent look: ...
	- Add package references required for the dictionaries
	- Add xml namespace required for the dictionaries
	- Build to check if everything is ok
6. Add new class named <YourModule>Module
	- Make it public
	- Add Prism.Wpf package reference to the project
	- Implement IModule
	- Remove throws
	- Create ctor and ask for IRegionManager service
	- In OnInitialized register <YourModule>View in 'main-content-region'
7. Go to the view's code behind and implement IHeadered (from ProjectWeekendPuzzles.Core)
	- Dependencies -> Add Project Reference -> Browse for <your-repo-folder>\project-weekend-puzzles\src\app\ProjectWeekendPuzzles.Core\bin\Debug\net5.0-windows\ProjectWeekendPuzzlzes.Core.dll
	- Go back to view's xaml and merge the following resource dictionary from ProjectWeekendPuzzlesCore to set a consistent icon size
	- Add the code to ctor
	- Implement ProjectWeekendPuzzles.Core.ViewContract.IHeadered
8. Add xcopy post-build action to put your module dlls in the same folder as the main application
	- Add <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies> to your project PropertyGroup to force copying nuget referenced dlls
9. Build your module
10. Add module reference in the application app.config
11. Build and see the application with your module loaded
